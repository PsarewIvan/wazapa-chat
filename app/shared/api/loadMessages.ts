import { MOCK_MASSAGES } from '../mock/mock-messages';
import { MOCK_USERS } from '../mock/mock-users';
import type { MessageType } from '../types/message';

const now = Date.now();

function getMessages(): Record<string, MessageType[]> {
    const result: Record<string, MessageType[]> = {};

    Object.values(MOCK_USERS).forEach((user, userIndex) => {
        result[user.id] = Array.from({ length: 30 }, (_, index) => {
            const original = MOCK_MASSAGES[index % MOCK_MASSAGES.length];

            return {
                ...original,
                ...(original.text
                    ? { text: `[To user ${user.id}] ${original.text}` }
                    : {}),
                senderId:
                    original.senderId === '' ? user.id : original.senderId,
                receiverId:
                    original.receiverId === '' ? user.id : original.receiverId,
                id: `msg-${index + 1}`,
                timestamp: new Date(now - index * 60_000 * 60 * 5), // 5 hours
            };
        });

        if (userIndex === 0) {
            result[user.id].push({
                id: '33333',
                timestamp: new Date(),
                text: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.',
                status: 'sent',
                senderId: 'user-1',
                receiverId: user.id,
            });
        }

        if (userIndex === 1) {
            result[user.id].push(
                {
                    id: '4444',
                    timestamp: new Date(),
                    text: '–î–∞–≤–∞–π –ø—è—Ç–Ω–∏—Ü—É –≤ 15:30! –ù–∞–¥–µ—é—Å—å, —É—Å–ø–µ–µ–º –∑–∞ —á–∞—Å-–ø–æ–ª—Ç–æ—Ä–∞, —É –º–µ–Ω—è –ø–æ—Ç–æ–º –≤—Å—Ç—Ä–µ—á–∞ üòÖ',
                    status: 'sent',
                    senderId: 'user-1',
                    receiverId: user.id,
                },
                {
                    id: '5555',
                    timestamp: new Date(),
                    text: '–ü—Ä–∏–≤–µ—Ç! –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å —á—Ç–æ-—Ç–æ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º?',
                    status: 'sent',
                    senderId: 'user-1',
                    receiverId: user.id,
                }
            );
        }

        if (userIndex === 2) {
            result[user.id].push({
                id: '666',
                timestamp: new Date(),
                text: '–§–æ—Ç–æ —Å—É–ø–µ—Ä! –¢–∞–∫–æ–π –¥–∏–∑–∞–π–Ω –≤–ø–æ–ª–Ω–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∏ –Ω–∞ —Ç–≤–æ–µ–π –¥–ª–∏–Ω–µ —Ç–æ–∂–µ –±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è —Å—Ç–∏–ª—å–Ω–æ üôå\n–ü—è—Ç–Ω–∏—Ü—É –≤ 15:30 –∑–∞–ø–∏—Å–∞–ª–∞. –£—á—Ç–∏, —á—Ç–æ —Å –¥–∏–∑–∞–π–Ω–æ–º –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1—á 40 –º–∏–Ω ‚Äî –Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ –º–∞–∫—Å–∏–º—É–º—É —É–ª–æ–∂–∏—Ç—å—Å—è.',
                status: 'sent',
                senderId: user.id,
                receiverId: 'user-1',
            });
        }

        if (userIndex === 3) {
            result[user.id].push({
                id: '666',
                timestamp: new Date(),
                text: '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞–ø–æ–º–∏–Ω–∞—é, —Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –≤ 16:00 –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ üíá‚Äç‚ôÄÔ∏è',
                status: 'delivered',
                senderId: user.id,
                receiverId: 'user-1',
            });
        }
    });

    return result;
}

const mockMessages = getMessages();

// Load messages imitation
export function loadMessages({
    userId,
}: {
    userId: string;
}): Promise<MessageType[]> {
    return new Promise((resolve) => {
        const messages = mockMessages[userId] || [];

        setTimeout(() => {
            resolve(messages);
        }, 500);
    });
}
